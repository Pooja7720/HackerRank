#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);

/*
 * Complete the 'pageCount' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER p
 */

int pageCount(int n, int p) {
    // flip is total number of turns
    int flip = 0;
    
    // for first and last page, you don't have to flip so return 0
    if(p == 1 || p == n)
    {
        return 0;
    }
    else
    {
        // It comes here if the page is not first or last, it must be in between
        
        // If the number is nearer from the fisrt side then flip from first by calculating difference between the number from first and last
        if((n-p) > (p-1))
        {
            // flip from start
            
            for(int i=1;i<p;i++)
            {
                // flips odd page when you start from starting
                if(i%2!=0)
                {
                    flip++;
                }
            }
            
        }
        else 
        {
            // Here the number is nearer from last
            // flip from end
                for(int i=n;i>p;i--)
                {
                    // flips even page when you start from end
                    if(i%2==0)
                    {
                        flip++;
                    }
                }
            
        }
        
        return flip;
    }
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string p_temp;
    getline(cin, p_temp);

    int p = stoi(ltrim(rtrim(p_temp)));

    int result = pageCount(n, p);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
