#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int distinct(char str[])
{
    // CHECKS WEATHER THE CHARACTER IS SAME OR NOT
    int count = 0;

    for (int i = 0; i < strlen(str); i++){
        int appears = 1;
         for (int j = 0; j < i; j++){
              if (str[j] == str[i]){
                  appears = 0;
                  break;
              }
         }

         if (appears!=0){
             count++;
         }
    }
    return count;
}

int lexicographic_sort(const char* a, const char* b) {
    // THIS FUNCTION IS FOR PRINTING STRINGS IN ASCENDING ORDER IN THE FORM OF CHARACTERS
    int val = strcmp(a,b);
    if(val>0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

int lexicographic_sort_reverse(const char* a, const char* b) {
    // THIS FUNCTION IS FOR PRINTING STRINGS IN DESCENDING ORDER IN THE FORM OF CHARACTERS
    int val = strcmp(a,b);
    if(val>0)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}

int sort_by_number_of_distinct_characters(char* a, char* b) {
    // THIS FUNCTION IS FOR PRINTING STRINGS IN ASCENDING ORDER IN THE FORM OF LENGTH
    int d1 = distinct(a), d2 = distinct(b);
    int val = strcmp(a,b);
    if(d1>d2)
    {
        return 1;
    }
    else if(d1 == d2)
    {
        if(val>0)
        {
            return 1;
        }
        else {
            return 0;
        }
    }
    else {
        return 0;
    }
}

int sort_by_length(const char* a, const char* b) {
    // THIS FUNCTION IS FOR PRINTING STRINGS IN DESCENDING ORDER IN THE FORM OF CHARACTERS
    int len1,len2,val;
    len1 = strlen(a);
    len2 = strlen(b);
    val = strcmp(a,b);
    if(len1>len2)
    {
        return 1;
    }
    else if(len1 == len2)
    {
        if(val>0)
        {
            return 1;
        }
        else {
            return 0;
        }
    }
    else
    {
        return 0;
    }
}

void string_sort(char** arr,const int len,int (*cmp_func)(const char* a, const char* b)){
    // MAIN SORTING FUNCTION
    for(int i=0;i<len;i++)
    {
        for(int j=0;j<len-1;j++)
        {
            if(cmp_func(arr[j],arr[j+1]))
            {
                char *temp;
                temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
}

int main() 
{
    int n;
    scanf("%d", &n);
  
    char** arr;
	arr = (char**)malloc(n * sizeof(char*));
  
    for(int i = 0; i < n; i++){
        *(arr + i) = malloc(1024 * sizeof(char));
        scanf("%s", *(arr + i));
        *(arr + i) = realloc(*(arr + i), strlen(*(arr + i)) + 1);
    }
  
    string_sort(arr, n, lexicographic_sort);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]);
    printf("\n");

    string_sort(arr, n, lexicographic_sort_reverse);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]); 
    printf("\n");

    string_sort(arr, n, sort_by_length);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]);    
    printf("\n");

    string_sort(arr, n, sort_by_number_of_distinct_characters);
    for(int i = 0; i < n; i++)
        printf("%s\n", arr[i]); 
    printf("\n");
}
